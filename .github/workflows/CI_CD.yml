name: CI/CD Rust

on:
  push:
    branches:
      - qa
      - hml
      - main

jobs:
  setup_dependencies:
    name: Instalar Dependências de Sistema
    runs-on: ubuntu-latest

    steps:
      - name: Atualizar e instalar dependências básicas
        run: sudo apt-get update && sudo apt-get install -y build-essential docker.io

      - name: Iniciar serviço Docker
        run: |
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Verificar Docker
        run: docker --version

  build:
    name: Build Rust Project
    runs-on: ubuntu-latest
    needs: setup_dependencies

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cargo Build
        run: cargo build --release

  test:
    name: Test Rust
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run Test
        run: cargo test --all --release

  deploy_qa:
    name: Deploy to QA
    runs-on: [self-hosted, qa-machine]
    if: github.ref == 'refs/heads/qa'

    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Instalar Dependências
      run: |
        if ! command -v docker &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
        fi

    - name: Build Docker Image localmente
      run: docker build -t rust-app-local:latest .

    - name: Parar e remover container antigo em QA
      run: |
        docker stop rust-app || true
        docker rm rust-app || true

    - name: Rodar novo container em QA
      run: docker run -d -p 8080:8080 --name rust-app rust-app-local:latest

  deploy_hml:
    name: Deploy to HML
    runs-on: [self-hosted, hml-machine]
    if: github.ref == 'refs/heads/hml'

    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Instalar Dependências
      run: |
        if ! command -v docker &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
        fi

    - name: Build Docker Image localmente
      run: docker build -t rust-app-local:latest .

    - name: Parar e remover container antigo em HML
      run: |
        docker stop rust-app || true
        docker rm rust-app || true

    - name: Rodar novo container em HML
      run: docker run -d -p 8080:8080 --name rust-app rust-app-local:latest

  deploy_prod:
    name: Deploy to Production
    runs-on: [self-hosted, prod-machine]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Instalar Dependências
      run: |
        if ! command -v docker &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
        fi

    - name: Build Docker Image localmente
      run: docker build -t rust-app-local:latest .

    - name: Parar e remover container antigo em PROD
      run: |
        docker stop rust-app || true
        docker rm rust-app || true

    - name: Rodar novo container em PROD
      run: docker run -d -p 8080:8080 --name rust-app rust-app-local:latest
